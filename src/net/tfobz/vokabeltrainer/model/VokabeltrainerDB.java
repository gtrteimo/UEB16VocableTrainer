package net.tfobz.vokabeltrainer.model;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Hashtable;
import java.util.List;
import java.util.Properties;

/**
 * Utility class for accessing an HsqlDB database. The hsqldb.jar archive must be included
 * in the application's classpath. The archive can be found at http://hsqldb.org/
 * 
 * This class provides methods to create, read, update, and delete (CRUD) operations
 * for vocabulary training, including managing learning card decks, subjects, and cards.
 * 
 * @author 
 */
public class VokabeltrainerDB {
    
    public static int fachNum = 1;
    
    protected static final String DB_NAME = "lernkarteien";

    protected static final String CREATE_EINSTELLUNGEN = "CREATE TABLE einstellungen( "
            + "  elnummerstandard INTEGER, "
            + "  elernkarteienmiterinnerung BOOLEAN DEFAULT 0, "
            + "  FOREIGN KEY (elnummerstandard) REFERENCES lernkarteien(lnummer) "
            + "    ON DELETE SET NULL ON UPDATE CASCADE " + "  );";
    protected static final String CREATE_LERNKARTEIEN = "CREATE TABLE lernkarteien( "
            + "  lnummer INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) "
            + "    NOT NULL PRIMARY KEY, "
            + "  lbeschreibung VARCHAR(500) NOT NULL UNIQUE, "
            + "  lworteinsbeschreibung VARCHAR(100) NOT NULL, "
            + "  lwortzweibeschreibung VARCHAR(100) NOT NULL, "
            + "  lrichtung BOOLEAN DEFAULT 1 NOT NULL, "
            + "  lgrosskleinschreibung BOOLEAN DEFAULT 0 NOT NULL " + "  );";
    protected static final String CREATE_FAECHER = "CREATE TABLE faecher( "
            + "  fnummer INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) "
            + "    NOT NULL PRIMARY KEY, " + "  fbeschreibung VARCHAR(500), "
            + "  ferinnerung INTEGER DEFAULT 1, " + "  fgelerntam DATE, "
            + "  lnummer INTEGER NOT NULL, "
            + "  FOREIGN KEY (lnummer) REFERENCES lernkarteien(lnummer) "
            + "    ON DELETE CASCADE ON UPDATE CASCADE " + "  );";
    protected static final String CREATE_KARTEN = "CREATE TABLE karten( "
            + "  knummer INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) "
            + "    NOT NULL PRIMARY KEY, " 
            + "  kworteins VARCHAR(100) NOT NULL, "
            + "  kwortzwei VARCHAR(100) NOT NULL, " 
            + "  fnummer INTEGER NOT NULL, "
            + "  FOREIGN KEY (fnummer) REFERENCES faecher(fnummer) "
            + "    ON DELETE CASCADE ON UPDATE CASCADE " + "  );";

    protected static final String DROP_EINSTELLUNGEN = "DROP TABLE einstellungen IF EXISTS;";
    protected static final String DROP_LERNKARTEIEN = "DROP TABLE lernkarteien IF EXISTS;";
    protected static final String DROP_FAECHER = "DROP TABLE faecher IF EXISTS;";
    protected static final String DROP_KARTEN = "DROP TABLE karten IF EXISTS;";

    protected static final String INSERT_LERNKARTEI1 = "INSERT INTO lernkarteien(lbeschreibung, lworteinsbeschreibung, lwortzweibeschreibung, lrichtung, lgrosskleinschreibung) "
            + "  VALUES('Deutsch Englisch','Deutsch','Englisch',true,false);";
    protected static final String INSERT_LERNKARTEI2 = "INSERT INTO lernkarteien(lbeschreibung, lworteinsbeschreibung, lwortzweibeschreibung, lrichtung, lgrosskleinschreibung) "
            + "  VALUES('Deutsch Italienisch','Deutsch','Italienisch',false,true);";
    protected static final String INSERT_LERNKARTEI3 = "INSERT INTO lernkarteien(lbeschreibung, lworteinsbeschreibung, lwortzweibeschreibung, lrichtung, lgrosskleinschreibung) "
            + "  VALUES('Deutsch Französisch','Deutsch','Französisch',false,true);";
    protected static final String INSERT_FACH11 = "INSERT INTO faecher(fbeschreibung, ferinnerung, fgelerntam, lnummer) "
            + "  VALUES('Fach 1',0,'" + getActualDate() + "', 1);";
    protected static final String INSERT_FACH21 = "INSERT INTO faecher(fbeschreibung, ferinnerung, fgelerntam, lnummer) "
            + "  VALUES('Fach 1',1,'" + getActualDate() + "', 2);";
    protected static final String INSERT_KARTE111 = "INSERT INTO karten(kworteins, kwortzwei, fnummer) "
            + "  VALUES('Haus','house',1);";
    protected static final String INSERT_KARTE112 = "INSERT INTO karten(kworteins, kwortzwei, fnummer) "
            + "  VALUES('Dach','roof',1);";
    protected static final String INSERT_KARTE113 = "INSERT INTO karten(kworteins, kwortzwei, fnummer) "
            + "  VALUES('Fenster','window',1);";
    protected static final String INSERT_KARTE114 = "INSERT INTO karten(kworteins, kwortzwei, fnummer) "
            + "  VALUES('Tür','door',1);";
    protected static final String INSERT_KARTE115 = "INSERT INTO karten(kworteins, kwortzwei, fnummer) "
            + "  VALUES('Hund','dog',1);";
    protected static final String INSERT_KARTE116 = "INSERT INTO karten(kworteins, kwortzwei, fnummer) "
            + "  VALUES('Katze','cat',1);";
    protected static final String INSERT_KARTE117 = "INSERT INTO karten(kworteins, kwortzwei, fnummer) "
            + "  VALUES('Fisch','fish',1);";
    protected static final String INSERT_KARTE118 = "INSERT INTO karten(kworteins, kwortzwei, fnummer) "
            + "  VALUES('Vogel','bird',1);";
    protected static final String INSERT_KARTE121 = "INSERT INTO karten(kworteins, kwortzwei, fnummer) "
            + "  VALUES('Haus','casa',2);";
    protected static final String INSERT_KARTE122 = "INSERT INTO karten(kworteins, kwortzwei, fnummer) "
            + "  VALUES('Hund','cane',2);";

    /**
     * Demonstrates how to use the VokabeltrainerDB class to access the database.
     * This main method retrieves all learning decks, their subjects, and a random card
     * from the first subject of the first deck.
     *
     * @param args Command-line arguments (not used).
     */
    public static void mainn(String[] args) {
        // Retrieve all learning decks
        List<Lernkartei> lernkarteien = VokabeltrainerDB.getLernkarteien();
        for (Lernkartei lernkartei : lernkarteien)
            System.out.println(lernkartei);
        
        // Retrieve the first learning deck from the list
        Lernkartei lernkartei = lernkarteien.get(0);
        
        // Retrieve all subjects of the selected learning deck
        List<Fach> faecher = VokabeltrainerDB.getFaecher(lernkartei.getNummer());
        for (Fach fach : faecher)
            System.out.println(fach);
        
        // Retrieve the first subject from the list
        Fach fach = faecher.get(0);
        
        // Retrieve a random card from the selected subject
        Karte k = VokabeltrainerDB.getZufaelligeKarte(lernkartei.getNummer(), fach.getNummer());
        System.out.println(k);
    }
    
    /**
     * Creates the necessary tables in the database if they do not already exist.
     * Additionally, inserts a default settings record.
     * 
     * Note: This method writes a record to the settings table.
     */
    public static void erstellenTabellen() {
        Connection con = null;
        Statement stmt = null;
        try {
            con = getConnection();
            stmt = con.createStatement();
            stmt.executeUpdate(CREATE_LERNKARTEIEN);
            stmt.executeUpdate(CREATE_FAECHER);
            stmt.executeUpdate(CREATE_KARTEN);
            stmt.executeUpdate(CREATE_EINSTELLUNGEN);
            String sql = "INSERT INTO einstellungen(elnummerstandard, elernkarteienmiterinnerung) "
                    + "  VALUES (NULL, FALSE);";
            stmt.executeUpdate(sql);
            con.commit();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try { stmt.close(); } catch (Exception e) { /* Ignored */ }
            try { con.close(); } catch (Exception e) { /* Ignored */ }
        }
    }

    /**
     * Deletes all existing tables from the database.
     * This method removes settings, cards, subjects, and learning decks tables.
     */
    protected static void loeschenTabellen() {
        Connection con = null;
        Statement stmt = null;
        try {
            con = getConnection();
            stmt = con.createStatement();
            stmt.executeUpdate(DROP_EINSTELLUNGEN);
            stmt.executeUpdate(DROP_KARTEN);
            stmt.executeUpdate(DROP_FAECHER);
            stmt.executeUpdate(DROP_LERNKARTEIEN);
            con.commit();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try { stmt.close(); } catch (Exception e) { /* Ignored */ }
            try { con.close(); } catch (Exception e) { /* Ignored */ }
        }
    }

    /**
     * Adds test data to the database tables. This includes inserting predefined
     * learning decks, subjects, and cards for initial testing purposes.
     */
    protected static void hinzufuegenTestdaten() {
        Connection con = null;
        Statement stmt = null;
        try {
            con = getConnection();
            stmt = con.createStatement();
            stmt.executeUpdate(INSERT_LERNKARTEI1);
            stmt.executeUpdate(INSERT_LERNKARTEI2);
            stmt.executeUpdate(INSERT_LERNKARTEI3);
            stmt.executeUpdate(INSERT_FACH11);
            stmt.executeUpdate(INSERT_FACH21);
            stmt.executeUpdate(INSERT_KARTE111);
            stmt.executeUpdate(INSERT_KARTE112);
            stmt.executeUpdate(INSERT_KARTE113);
            stmt.executeUpdate(INSERT_KARTE114);
            stmt.executeUpdate(INSERT_KARTE115);
            stmt.executeUpdate(INSERT_KARTE116);
            stmt.executeUpdate(INSERT_KARTE117);
            stmt.executeUpdate(INSERT_KARTE118);
            stmt.executeUpdate(INSERT_KARTE121);
            stmt.executeUpdate(INSERT_KARTE122);
            con.commit();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try { stmt.close(); } catch (Exception e) { /* Ignored */ }
            try { con.close(); } catch (Exception e) { /* Ignored */ }
        }
    }

    /**
     * Establishes and returns a connection to the HSQLDB database.
     * 
     * @return A Connection object to the database.
     * @throws SQLException If a database access error occurs or the driver is not found.
     */
    public static Connection getConnection() throws SQLException {
        Connection ret = null;
        try {
            // Register the JDBC driver for HSQLDB
            Class.forName("org.hsqldb.jdbcDriver");
        } catch (ClassNotFoundException e) {
            throw new SQLException("HSQLDB driver not found");
        }
        // Define connection properties
        Properties p = new Properties();
        p.setProperty("user", "SA");
        p.setProperty("password", "");
        p.setProperty("shutdown", "true");
        // Open the database connection. "file" indicates persistent storage.
        ret = DriverManager.getConnection("jdbc:hsqldb:file:" + DB_NAME, p);
        ret.setAutoCommit(false);
        return ret;
    }

    /**
     * Retrieves the learning deck with the specified number from the database.
     * 
     * @param nummerLernkartei The number of the learning deck.
     * @return The Lernkartei object if found, otherwise null.
     */
    public static Lernkartei getLernkartei(int nummerLernkartei) {
        Lernkartei ret = null;
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            con = getConnection();
            stmt = con.createStatement();
            String sql = "SELECT lnummer, lbeschreibung, lworteinsbeschreibung, lwortzweibeschreibung, lrichtung, lgrosskleinschreibung "
                    + "  FROM lernkarteien"
                    + "  WHERE lnummer = "
                    + nummerLernkartei
                    + ";";
            rs = stmt.executeQuery(sql);
            if (rs.next()) {
                int nummer = rs.getInt("lnummer");
                String beschreibung = rs.getString("lbeschreibung");
                String wortEinsBeschreibung = rs.getString("lworteinsbeschreibung");
                String wortZweiBeschreibung = rs.getString("lwortzweibeschreibung");
                boolean richtung = rs.getBoolean("lrichtung");
                boolean grossKleinschreibung = rs.getBoolean("lgrosskleinschreibung");
                ret = new Lernkartei(nummer, beschreibung, wortEinsBeschreibung,
                        wortZweiBeschreibung, richtung, grossKleinschreibung);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            ret = null;
        } finally {
            try { rs.close(); } catch (Exception e) { /* Ignored */ }
            try { stmt.close(); } catch (Exception e) { /* Ignored */ }
            try { con.close(); } catch (Exception e) { /* Ignored */ }
        }
        return ret;
    }

    /**
     * Retrieves a list of all learning decks from the database.
     * 
     * @return A list of Lernkartei objects, or null if a database error occurs.
     */
    public static List<Lernkartei> getLernkarteien() {
        ArrayList<Lernkartei> ret = new ArrayList<>();
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            con = getConnection();
            stmt = con.createStatement();
            String sql = "SELECT lnummer, lbeschreibung, lworteinsbeschreibung, lwortzweibeschreibung, lrichtung, lgrosskleinschreibung "
                    + "  FROM lernkarteien;";
            rs = stmt.executeQuery(sql);
            while (rs.next()) {
                int nummer = rs.getInt("lnummer");
                String beschreibung = rs.getString("lbeschreibung");
                String wortEinsBeschreibung = rs.getString("lworteinsbeschreibung");
                String wortZweiBeschreibung = rs.getString("lwortzweibeschreibung");
                boolean richtung = rs.getBoolean("lrichtung");
                boolean grossKleinschreibung = rs.getBoolean("lgrosskleinschreibung");
                Lernkartei l = new Lernkartei(nummer, beschreibung,
                        wortEinsBeschreibung, wortZweiBeschreibung, richtung,
                        grossKleinschreibung);
                ret.add(l);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            ret = null;
        } finally {
            try { rs.close(); } catch (Exception e) { /* Ignored */ }
            try { stmt.close(); } catch (Exception e) { /* Ignored */ }
            try { con.close(); } catch (Exception e) { /* Ignored */ }
        }
        return ret;
    }

    /**
     * Retrieves the subjects associated with a specific learning deck.
     * 
     * @param nummerLernkartei The number of the learning deck.
     * @return A list of Fach objects, or null if the learning deck does not exist or a database error occurs.
     */
    public static List<Fach> getFaecher(int nummerLernkartei) {
        ArrayList<Fach> ret = null;
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            con = getConnection();
            stmt = con.createStatement();
            String sql = 
                    "SELECT * " +
                    "  FROM lernkarteien " +
                    "  WHERE lnummer = " + nummerLernkartei + ";";
            rs = stmt.executeQuery(sql);
            if (rs.next()) {
                ret = new ArrayList<>();
                sql = "SELECT fnummer, fbeschreibung, ferinnerung, fgelerntam, lnummer "
                        + "  FROM faecher "
                        + "  WHERE lnummer = "
                        + nummerLernkartei
                        + "  ORDER BY fnummer;";
                rs = stmt.executeQuery(sql);
                while (rs.next()) {
                    int nummer = rs.getInt("fnummer");
                    String beschreibung = rs.getString("fbeschreibung");
                    int erinnerung = rs.getInt("ferinnerung");
                    Date gelerntAm = rs.getDate("fgelerntam");
                    Fach f = new Fach(nummer, beschreibung, erinnerung, gelerntAm);
                    ret.add(f);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            ret = null;
        } finally {
            try { rs.close(); } catch (Exception e) { /* Ignored */ }
            try { stmt.close(); } catch (Exception e) { /* Ignored */ }
            try { con.close(); } catch (Exception e) { /* Ignored */ }
        }
        return ret;
    }

    /**
     * Searches for a subject with the specified number within a given learning deck.
     * 
     * @param nummerLernkartei The number of the learning deck.
     * @param nummerFach The number of the subject.
     * @return The Fach object if found, otherwise null.
     */
    public static Fach getFach(int nummerLernkartei, int nummerFach) {
        Fach ret = null;
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            con = getConnection();
            stmt = con.createStatement();
            String sql = "SELECT fnummer, fbeschreibung, ferinnerung, fgelerntam, lnummer "
                    + "  FROM faecher "
                    + "  WHERE fnummer = " + nummerFach + " " 
                    + "    AND lnummer = " + nummerLernkartei+ ";";
            rs = stmt.executeQuery(sql);
            if (rs.next()) {
                int nummer = rs.getInt("fnummer");
                String beschreibung = rs.getString("fbeschreibung");
                int erinnerung = rs.getInt("ferinnerung");
                Date gelerntAm = rs.getDate("fgelerntam");
                ret = new Fach(nummer, beschreibung, erinnerung, gelerntAm);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            ret = null;
        } finally {
            try { rs.close(); } catch (Exception e) { /* Ignored */ }
            try { stmt.close(); } catch (Exception e) { /* Ignored */ }
            try { con.close(); } catch (Exception e) { /* Ignored */ }
        }
        return ret;
    }
    
    /**
     * Searches for a subject with the specified number.
     * 
     * @param nummerFach The number of the subject.
     * @return The Fach object if found, otherwise null.
     */
    public static Fach getFach(int nummerFach) {
        Fach ret = null;
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            con = getConnection();
            stmt = con.createStatement();
            String sql = "SELECT fnummer, fbeschreibung, ferinnerung, fgelerntam "
                    + "  FROM faecher "
                    + "  WHERE fnummer = " + nummerFach + ";";
            rs = stmt.executeQuery(sql);
            if (rs.next()) {
                int nummer = rs.getInt("fnummer");
                String beschreibung = rs.getString("fbeschreibung");
                int erinnerung = rs.getInt("ferinnerung");
                Date gelerntAm = rs.getDate("fgelerntam");
                ret = new Fach(nummer, beschreibung, erinnerung, gelerntAm);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            ret = null;
        } finally {
            try { rs.close(); } catch (Exception e) { /* Ignored */ }
            try { stmt.close(); } catch (Exception e) { /* Ignored */ }
            try { con.close(); } catch (Exception e) { /* Ignored */ }
        }
        return ret;
    }
    
    /**
     * Retrieves a random card from the specified subject within the given learning deck.
     * Note: Does not record that learning occurred on this subject today.
     * 
     * @param nummerLernkartei The number of the learning deck.
     * @param nummerFach The number of the subject.
     * @return The Karte object if found, otherwise null.
     */
    public static Karte getZufaelligeKarte(int nummerLernkartei, int nummerFach) {
        Karte ret = null;
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            con = getConnection();
            stmt = con.createStatement();
            String sql =
                 "SELECT k.knummer, k.kworteins, k.kwortzwei, l.lrichtung, l.lgrosskleinschreibung " +
                 "  FROM karten k, faecher f, lernkarteien l " +
                 "  WHERE k.fnummer = f.fnummer " +
                 "    AND l.lnummer = f.lnummer " +
                 "    AND f.fnummer = " + nummerFach + " " +
                 "    AND f.lnummer = " + nummerLernkartei + " " +
                 "  ORDER BY RAND() " +
                 "  LIMIT 1;";
            rs = stmt.executeQuery(sql);
            if (rs.next()) {
              int nummer = rs.getInt("knummer");
              String wortEins = rs.getString("kworteins");
                String wortZwei = rs.getString("kwortzwei");
                boolean richtung = rs.getBoolean("lrichtung");
                boolean grossKleinschreibung = rs.getBoolean("lgrosskleinschreibung");
                ret = new Karte(nummer, wortEins, wortZwei, richtung, grossKleinschreibung);
                con.commit();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            ret = null;
        } finally {
            try { rs.close(); } catch (Exception e) { /* Ignored */ }
            try { stmt.close(); } catch (Exception e) { /* Ignored */ }
            try { con.close(); } catch (Exception e) { /* Ignored */ }
        }
        return ret;
    }
    
    /**
     * Retrieves the card with the specified number.
     * 
     * @param nummerKarte The number of the card.
     * @return The Karte object if found, otherwise null.
     */
    public static Karte getKarte(int nummerKarte) {
        Karte ret = null;
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            con = getConnection();
            stmt = con.createStatement();
            String sql = "SELECT k.knummer, k.kworteins, k.kwortzwei, l.lrichtung, l.lgrosskleinschreibung "
                    + "  FROM karten k, faecher f, lernkarteien l " 
                    + "  WHERE k.fnummer = f.fnummer AND " 
                    + "    f.lnummer = l.lnummer AND " 
                    + "    k.knummer = " + nummerKarte + ";";
            rs = stmt.executeQuery(sql);
            if (rs.next()) {
                int nummer = rs.getInt("knummer");
                String wortEins = rs.getString("kworteins");
                String wortZwei = rs.getString("kwortzwei");
                boolean richtung = rs.getBoolean("lrichtung");
                boolean grossKleinschreibung = rs.getBoolean("lgrosskleinschreibung");
                ret = new Karte(nummer, wortEins, wortZwei, richtung, grossKleinschreibung);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            ret = null;
        } finally {
            try { rs.close(); } catch (Exception e) { /* Ignored */ }
            try { stmt.close(); } catch (Exception e) { /* Ignored */ }
            try { con.close(); } catch (Exception e) { /* Ignored */ }
        }
        return ret;
    }
    
    /**
     * Moves a card to the next subject and records that learning occurred in the learning deck.
     * 
     * @param karte The card to be marked as correct.
     * @return 0 if successful,
     *         -1 if the card could not be saved or a database error occurred,
     *         -2 if there is no subject after the current subject.
     */
    public static int setKarteRichtig(Karte karte) {
        int ret = -1;
        if (karte != null && karte.getNummer() != -1) {
            Connection con = null;
            Statement stmt = null;
            ResultSet rs = null;
            try {
                con = getConnection();
                stmt = con.createStatement();
                String sql =
                     "SELECT fnummer " +
                     "  FROM faecher f2 " +
                     "  WHERE fnummer > " +
                     "    (SELECT f1.fnummer " +
                     "      FROM karten k1, faecher f1 " +
                     "      WHERE k1.fnummer = f1.fnummer AND " +
                     "        f2.lnummer = f1.lnummer AND " +
                     "        knummer = " + karte.getNummer() + ") " +
                     "  ORDER BY fnummer;";
                rs = stmt.executeQuery(sql);
                if (!rs.next())
                    ret = -2; // No subject exists after the current one
                else {
                    int fachNummer = rs.getInt("fnummer");
                    sql =
                         "UPDATE faecher " +
                         "  SET fgelerntam = NOW() " +
                         "  WHERE fnummer = " +
                         "    (SELECT fnummer " +
                         "      FROM karten " +
                         "      WHERE knummer = " + karte.getNummer() + ");";
                    if (stmt.executeUpdate(sql) == 1) {
                        sql =
                            "UPDATE karten " +
                            "  SET fnummer = " + fachNummer +
                            "  WHERE knummer = " + karte.getNummer() + ";";
                        if (stmt.executeUpdate(sql) == 1) {
                            ret = 0;
                            con.commit();
                        }
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
                ret = -1;
            } finally {
                try { rs.close(); } catch (Exception e) { /* Ignored */ }
                try { stmt.close(); } catch (Exception e) { /* Ignored */ }
                try { con.close(); } catch (Exception e) { /* Ignored */ }
            }
        }
        return ret;
    }
    
    /**
     * Moves a card to the first subject of the learning deck and records that learning occurred.
     * 
     * @param karte The card to be marked as incorrect.
     * @return 0 if successful,
     *         -1 if the card could not be saved or a database error occurred.
     */
    public static int setKarteFalsch(Karte karte) {
        int ret = -1;
        if (karte != null && karte.getNummer() != -1) {
            Connection con = null;
            Statement stmt = null;
            ResultSet rs = null;
            try {
              con = getConnection();
                stmt = con.createStatement();
                String sql =
                     "SELECT fnummer " +
                     "  FROM faecher " +
                     "  WHERE lnummer = " +
                     "    (SELECT f.lnummer " +
                     "      FROM karten k, faecher f " +
                     "      WHERE k.fnummer = f.fnummer AND " +
                     "        knummer = " + karte.getNummer() + ") " +
                     "  ORDER BY fnummer;";
                rs = stmt.executeQuery(sql);
                rs.next();
                int fachNummer = rs.getInt("fnummer");
                sql =
                     "UPDATE karten " +
                     "  SET fnummer = " + fachNummer +
                     "  WHERE knummer = " + karte.getNummer() + ";";
                if (stmt.executeUpdate(sql) == 1) {
                    sql =
                         "UPDATE faecher " +
                         "  SET fgelerntam = NOW() " +
                         "  WHERE fnummer = " +
                         "    (SELECT fnummer " +
                         "      FROM karten " +
                         "      WHERE knummer = " + karte.getNummer() + ");";
                    if (stmt.executeUpdate(sql) == 1) {
                        ret = 0;
                        con.commit();
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
                ret = -1;
            } finally {
                try { rs.close(); } catch (Exception e) { /* Ignored */ }
                try { stmt.close(); } catch (Exception e) { /* Ignored */ }
                try { con.close(); } catch (Exception e) { /* Ignored */ }
            }
        }
        return ret;
    }
    
    /**
     * Adds a new subject to the specified learning deck. The subject is appended at the end.
     * If the learned date is not set, it defaults to the current date. If the subject description
     * is not provided, it defaults to "Subject <Number in Learning Deck>".
     * 
     * @param nummerLernkartei The number of the learning deck.
     * @param fach The Fach object to be added.
     * @return -1 if the learning deck does not exist or the subject already exists.
     */
    public static int hinzufuegenFach(int nummerLernkartei, Fach fach) {
        int ret = -1;
        if (fach != null && fach.getNummer() == -1 && getLernkartei(nummerLernkartei) != null) {
            Connection con = null;
            Statement stmt = null;
            ResultSet rs = null;
            try {
                con = getConnection();
                stmt = con.createStatement();
                String sqlBeschreibung = null;
                if (fach.getBeschreibung() != null && fach.getBeschreibung().equals("SetReminder")) {
                    fach.setErinnerungsIntervall((int)(getFaecher(nummerLernkartei).size() + 1));
                }
                sqlBeschreibung = "'" + (int)(getFaecher(nummerLernkartei).size() + 1) + "'";
                sqlBeschreibung = "'" + (int)(getFaecher(nummerLernkartei).size() + 1) + "'";
                
                String sqlGelerntAm = null;
                if (fach.getGelerntAm() == null)
                    sqlGelerntAm = "NOW()";
                else
                    sqlGelerntAm = "'" + VokabeltrainerDB.convertToString(fach.getGelerntAm()) + "'";
                String sql =
                     "INSERT INTO faecher(fbeschreibung, ferinnerung, fgelerntam, lnummer) " +
                     "  VALUES(" + sqlBeschreibung + ", " + fach.getErinnerungsIntervall() +
                     "    , " + sqlGelerntAm + ", " + nummerLernkartei + ");";
                if (stmt.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS) == 0)
                    ret = -1;
                else {
                    rs = stmt.getGeneratedKeys();
                    rs.next();
                    fach.nummer = rs.getInt(1);
                    ret = 0;
                    con.commit();
                }
            } catch (SQLException e) {
                e.printStackTrace();
                ret = -1;
            } finally {
                try { rs.close(); } catch (Exception e) { /* Ignored */ }
                try { stmt.close(); } catch (Exception e) { /* Ignored */ }
                try { con.close(); } catch (Exception e) { /* Ignored */ }
            }
        }
        return ret;
    }
     
    /**
     * Updates the contents of an existing subject. Only the description, reminder interval,
     * and learned date can be changed.
     * 
     * @param fach The Fach object with updated information.
     * @return -1 if the subject does not exist or a database error occurred,
     *         -2 if validation errors occurred.
     */
    public static int aendernFach(Fach fach) {
        int ret = -1;
        if (fach != null && fach.getNummer() != -1) {
            fach.validiere();
            if (fach.getFehler() != null)
                ret = -2;
            else {
                Connection con = null;
                Statement stmt = null;
                try {
                    con = getConnection();
                    stmt = con.createStatement();
                    String sqlBeschreibung = null;
                    if (fach.getBeschreibung() == null || fach.getBeschreibung().length() == 0)
                        sqlBeschreibung = "fbeschreibung = NULL";
                    else
                        sqlBeschreibung = "fbeschreibung = '" + fach.getBeschreibung() + "'";
                    String sqlGelerntAm = null;
                    if (fach.getGelerntAm() == null)
                        sqlGelerntAm = "fgelerntam = NULL";
                    else
                        sqlGelerntAm = "fgelerntam = '" +
                                VokabeltrainerDB.convertToString(fach.getGelerntAm()) + "'";
                    String sql =
                         "UPDATE faecher " +
                         "  SET " + sqlBeschreibung + ", " + sqlGelerntAm + ", " +
                         "    ferinnerung = " + fach.getErinnerungsIntervall() +
                         "  WHERE fnummer = " + fach.getNummer() + ";";
                    if (stmt.executeUpdate(sql) == 0)
                        ret = -1;
                    else {
                        ret = 0;
                        con.commit();
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                    ret = -1;
                } finally {
                    try { stmt.close(); } catch (Exception e) { /* Ignored */ }
                    try { con.close(); } catch (Exception e) { /* Ignored */ }
                }
            }
        }
        return ret;
    }
    
    /**
     * Adds a new learning deck to the database. The deck receives the number assigned by the database.
     * 
     * @param lernkartei The Lernkartei object to be added.
     * @return -1 if a database error occurred,
     *         -2 if validation errors occurred or a deck with the same description already exists.
     */
    public static int hinzufuegenLernkartei(Lernkartei lernkartei) {
        int ret = -1;
        if (lernkartei != null && lernkartei.getNummer() == -1) {
            lernkartei.validate();
            if (lernkartei.getFehler() != null)
                ret = -2;
            else {
                Connection con = null;
                Statement stmt = null;
                ResultSet rs = null;
                try {
                    con = getConnection();
                    stmt = con.createStatement();
                    String sqlBeschreibung = null;
                    if (lernkartei.getBeschreibung() == null ||
                            lernkartei.getBeschreibung().length() == 0)
                        sqlBeschreibung = "NULL";
                    else
                        sqlBeschreibung = "'" + lernkartei.getBeschreibung() + "'";
                    String sql =
                         "INSERT INTO lernkarteien(lbeschreibung, lworteinsbeschreibung, " +
                         "  lwortzweibeschreibung, lrichtung, lgrosskleinschreibung) " +
                         "  VALUES(" + sqlBeschreibung + ", '" +
                         lernkartei.getWortEinsBeschreibung() + "', '" +
                         lernkartei.getWortZweiBeschreibung() + "', " + lernkartei.getRichtung() +
                         ", " +
                         lernkartei.getGrossKleinschreibung() + ");";
                    if (stmt.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS) == 0)
                        ret = -1;
                    else {
                        rs = stmt.getGeneratedKeys();
                        rs.next();
                        lernkartei.nummer = rs.getInt(1);
                        ret = 0;
                        con.commit();
                    }
                } catch (SQLException e) {
                    if (e.getErrorCode() == -104) {
                        if (lernkartei.fehler == null)
                            lernkartei.fehler = new Hashtable<String, String>();
                        lernkartei.fehler.put("beschreibung",
                                 "A learning deck with the same description already exists");
                        ret = -2;
                    } else {
                        e.printStackTrace();
                        ret = -1;
                    }
                } finally {
                    try { rs.close(); } catch (Exception e) { /* Ignored */ }
                    try { stmt.close(); } catch (Exception e) { /* Ignored */ }
                    try { con.close(); } catch (Exception e) { /* Ignored */ }
                }
            }
        }
        return ret;
    }
    
    /**
     * Updates an existing learning deck in the database.
     * 
     * @param lernkartei The Lernkartei object with updated information.
     * @return -1 if the deck does not exist or a database error occurred,
     *         -2 if validation errors occurred or a deck with the same description already exists.
     */
    public static int aendernLernkartei(Lernkartei lernkartei) {
        int ret = -1;
        if (lernkartei != null && lernkartei.getNummer() != -1) {
            lernkartei.validate();
            if (lernkartei.getFehler() != null)
                ret = -2;
            else {
                Connection con = null;
                Statement stmt = null;
                try {
                    con = getConnection();
                    stmt = con.createStatement();
                    String sqlBeschreibung = null;
                    if (lernkartei.getBeschreibung() == null ||
                             lernkartei.getBeschreibung().length() == 0)
                        sqlBeschreibung = "NULL";
                    else
                        sqlBeschreibung = "'" + lernkartei.getBeschreibung() + "'";
                    String sql =
                             "UPDATE lernkarteien " +
                             "  SET lbeschreibung = " + sqlBeschreibung + ", " +
                             "    lworteinsbeschreibung = '" + lernkartei.getWortEinsBeschreibung() +
                             "', " +
                             "    lwortzweibeschreibung = '" + lernkartei.getWortZweiBeschreibung() +
                             "', " +
                             "    lrichtung = " + lernkartei.getRichtung() + ", " +
                             "    lgrosskleinschreibung = " + lernkartei.getGrossKleinschreibung() +
                             "  WHERE lnummer = " + lernkartei.getNummer() + ";";
                    if (stmt.executeUpdate(sql) == 0)
                        ret = -1;
                    else {
                        ret = 0;
                        con.commit();
                    }
                } catch (SQLException e) {
                    if (e.getErrorCode() == -104) {
                        if (lernkartei.fehler == null)
                             lernkartei.fehler = new Hashtable<String, String>();
                        lernkartei.fehler.put("beschreibung",
                                 "A learning deck with the same description already exists");
                        ret = -2;
                    } else {
                        e.printStackTrace();
                        ret = -1;
                    }
                } finally {
                    try { stmt.close(); } catch (Exception e) { /* Ignored */ }
                    try { con.close(); } catch (Exception e) { /* Ignored */ }
                }
            }
        }
        return ret;
    }
    
    /**
     * Deletes the specified learning deck from the database, including all associated subjects and cards.
     * 
     * @param nummerLernkartei The number of the learning deck to be deleted.
     * @return -1 if the deck was not found or a database error occurred,
     *         0 if successful.
     */
    public static int loeschenLernkartei(int nummerLernkartei) {
        int ret = -1;
        Connection con = null;
        Statement stmt = null;
        try {
            con = getConnection();
            stmt = con.createStatement();
            String sql =
                    "DELETE FROM lernkarteien " +
                    "  WHERE lnummer = " + nummerLernkartei + ";";
            if (stmt.executeUpdate(sql) == 0)
                ret = -1;
            else {
                ret = 0;
                con.commit();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            ret = -1;
        } finally {
            try { stmt.close(); } catch (Exception e) { /* Ignored */ }
            try { con.close(); } catch (Exception e) { /* Ignored */ }
        }
        return ret;
    }
    
    /**
     * Adds a new card to the first subject of the specified learning deck. The card receives
     * the number assigned by the database.
     * 
     * @param nummerLernkartei The number of the learning deck.
     * @param karte The Karte object to be added.
     * @return -1 if a database error occurred,
     *         -2 if the card is incomplete,
     *         -3 if the learning deck does not exist,
     *         -4 if no subjects exist in the learning deck,
     *         -5 if a duplicate card already exists in any subject of the learning deck.
     */
    public static int hinzufuegenKarte(int nummerLernkartei, Karte karte) {
        int ret = -1;
        if (karte != null && karte.getNummer() == -1) {
            karte.validiere();
            if (karte.getFehler() != null)
                ret = -2;
            else {
                List<Fach> faecher = getFaecher(nummerLernkartei);
                if (faecher == null)
                    ret = -3;
                else if (faecher.size() == 0)
                    ret = -4;
                else {
                    Connection con = null;
                    Statement stmt = null;
                    ResultSet rs = null;
                    try {
                        con = getConnection();
                        stmt = con.createStatement();
                        String sql = 
                             "SELECT lgrosskleinschreibung " +
                             "  FROM lernkarteien " +
                             "  WHERE lnummer = " + nummerLernkartei + ";";
                        rs = stmt.executeQuery(sql);
                        rs.next();
                        if (rs.getBoolean(1))
                            sql =
                                 "SELECT COUNT(*) " +
                                 "  FROM karten k, faecher f, lernkarteien l " +
                                 "  WHERE k.fnummer = f.fnummer AND " +
                                 "    f.lnummer = " + nummerLernkartei + " AND " +
                                 "    kworteins = '" + karte.getWortEins() + "' AND " +
                                 "    kwortzwei = '" + karte.getWortZwei() + "';";
                        else
                            sql =
                                 "SELECT COUNT(*) " +
                                 "  FROM karten k, faecher f, lernkarteien l " +
                                 "  WHERE k.fnummer = f.fnummer AND " +
                                 "    f.lnummer = " + nummerLernkartei + " AND " +
                                 "    LOWER(kworteins) = '" + karte.getWortEins().toLowerCase() + "' AND " +
                                 "    LOWER(kwortzwei) = '" + karte.getWortZwei().toLowerCase() + "';";
                        rs = stmt.executeQuery(sql);
                        rs.next();
                        if (rs.getInt(1) != 0)
                            ret = -5;
                        else {
                            sql =
                                 "INSERT INTO karten(kworteins, kwortzwei, fnummer) " +
                                 "  VALUES('" + karte.getWortEins() + "', '" + karte.getWortZwei() + "', " +
                                 faecher.get(0).getNummer() + ");";
                            if (stmt.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS) == 0)
                                ret = -1;
                            else {
                                rs = stmt.getGeneratedKeys();
                                rs.next();
                                karte.nummer = rs.getInt(1);
                                ret = 0;
                                con.commit();
                            }
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                        ret = -1;
                    } finally {
                        try { rs.close(); } catch (Exception e) { /* Ignored */ }
                        try { stmt.close(); } catch (Exception e) { /* Ignored */ }
                        try { con.close(); } catch (Exception e) { /* Ignored */ }
                    }
                }
            }
        }
        return ret;
    }
    
    /**
     * Updates the words of an existing card. Other properties of the card cannot be changed.
     * The card remains in the same subject.
     * 
     * @param karte The Karte object with updated words.
     * @return -1 if the card does not exist or a database error occurred,
     *         -2 if the card is incomplete,
     *         -4 if a duplicate card with the same contents already exists in any subject.
     */
    public static int aendernKarte(Karte karte) {
        int ret = -1;
        if (karte != null && karte.getNummer() != -1) {
            karte.validiere();
            if (karte.getFehler() != null)
                ret = -2;
            else {
                Connection con = null;
                Statement stmt = null;
                ResultSet rs = null;
                try {
                    con = getConnection();
                    stmt = con.createStatement();
                    String sql = null;
                    if (karte.grossKleinschreibung)
                        sql =
                             "SELECT COUNT(*) " +
                             "  FROM karten k1, faecher f1, faecher f2, karten k2 " +
                             "  WHERE k1.fnummer = f1.fnummer AND " +
                             "    k1.kworteins = '" + karte.getWortEins() + "' AND " +
                             "    k1.kwortzwei = '" + karte.getWortZwei() + "' AND " +
                             "    k1.knummer <> " + karte.getNummer() + " AND " +
                             "    f1.lnummer = f2.lnummer AND " +
                             "    f2.fnummer = k2.knummer AND " +
                             "    k2.knummer = " + karte.getNummer() + ";";
                    else
                        sql =
                             "SELECT COUNT(*) " +
                                     "  FROM karten k1, faecher f1, faecher f2, karten k2 " +
                                     "  WHERE k1.fnummer = f1.fnummer AND " +
                                     "    LOWER(k1.kworteins) = '" + karte.getWortEins().toLowerCase() + "' AND " +
                                     "    LOWER(k1.kwortzwei) = '" + karte.getWortZwei().toLowerCase() + "' AND " +
                                     "    k1.knummer <> " + karte.getNummer() + " AND " +
                                     "    f1.lnummer = f2.lnummer AND " +
                                     "    f2.fnummer = k2.knummer AND " +
                                     "    k2.knummer = " + karte.getNummer() + ";";
                    rs = stmt.executeQuery(sql);
                    rs.next();
                    if (rs.getInt(1) != 0)
                        ret = -4;
                    else {
                        sql =
                             "UPDATE karten " +
                             "  SET kworteins = '" + karte.getWortEins() + "', " +
                             "    kwortzwei = '" + karte.getWortZwei() + "' " +
                             "  WHERE knummer = " + karte.getNummer() + ";";
                        if (stmt.executeUpdate(sql) == 0)
                            ret = -1;
                        else {
                            ret = 0;
                            con.commit();
                        }
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                    ret = -1;
                } finally {
                    try { rs.close(); } catch (Exception e) { /* Ignored */ }
                    try { stmt.close(); } catch (Exception e) { /* Ignored */ }
                    try { con.close(); } catch (Exception e) { /* Ignored */ }
                }
            }
        }
        return ret;
    }
    
    /**
     * Deletes the card with the specified number from the database.
     * 
     * @param nummerKarte The number of the card to be deleted.
     * @return -1 if a database error occurred or the card was not found,
     *         0 if successful.
     */
    public static int loeschenKarte(int nummerKarte) {
        int ret = -1;
        Connection con = null;
        Statement stmt = null;
        try {
            con = getConnection();
            stmt = con.createStatement();
            String sql =
                    "DELETE FROM karten " +
                    "  WHERE knummer = " + nummerKarte + ";";
            if (stmt.executeUpdate(sql) == 0)
                ret = -1;
            else {
                ret = 0;
                con.commit();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            ret = -1;
        } finally {
            try { stmt.close(); } catch (Exception e) { /* Ignored */ }
            try { con.close(); } catch (Exception e) { /* Ignored */ }
        }
        return ret;
    }
    
    /**
     * Deletes all subjects and associated cards from the specified learning deck.
     * 
     * @param nummerLernkartei The number of the learning deck.
     * @return -1 if a database error occurred or the learning deck was not found,
     *         0 if successful.
     */
    public static int loeschenAlleFaecher(int nummerLernkartei) {
        int ret = -1;
        if (!(getLernkartei(nummerLernkartei) == null)) {
            Connection con = null;
            Statement stmt = null;
            try {
                con = getConnection();
                stmt = con.createStatement();
                String sql =
                        "DELETE FROM faecher " +
                        "  WHERE lnummer = " + nummerLernkartei + ";";
                stmt.executeUpdate(sql);
                con.commit();
                ret = 0;
            } catch (SQLException e) {
                e.printStackTrace();
                ret = -1;
            } finally {
                try { stmt.close(); } catch (Exception e) { /* Ignored */ }
                try { con.close(); } catch (Exception e) { /* Ignored */ }
            }
        }
        return ret;
    }
    
    /**
     * Retrieves a list of all learning decks that have subjects with expired reminders.
     * A reminder is considered expired if the difference between today's date and
     * the last learned date is greater than or equal to the reminder interval.
     * Also includes decks that have subjects where learning has never occurred.
     * Subjects with a reminder interval of 0 are ignored.
     * 
     * @return A list of Lernkartei objects with expired reminders, or null if a database error occurs.
     */
    public static List<Lernkartei> getLernkarteienErinnerung() {
        ArrayList<Lernkartei> ret = new ArrayList<>();
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            con = getConnection();
            stmt = con.createStatement();
            String sql =
                 "SELECT DISTINCT l.lnummer, l.lbeschreibung, " +
                 "  l.lworteinsbeschreibung, l.lwortzweibeschreibung, " +
                 "  l.lrichtung, l.lgrosskleinschreibung " +
                 "  FROM lernkarteien l, faecher f " +
                 "  WHERE l.lnummer = f.lnummer AND " +
                 "    (f.fgelerntam IS NULL OR " +
                 "    ferinnerung <> 0 AND DATEDIFF(NOW(),f.fgelerntam) >= ferinnerung) " +
                 "  ORDER BY l.lnummer;";
            rs = stmt.executeQuery(sql);
            while (rs.next()) {
                int nummer = rs.getInt("lnummer");
                String beschreibung = rs.getString("lbeschreibung");
                String wortEinsBeschreibung = rs.getString("lworteinsbeschreibung");
                String wortZweiBeschreibung = rs.getString("lwortzweibeschreibung");
                boolean richtung = rs.getBoolean("lrichtung");
                boolean grossKleinschreibung = rs.getBoolean("lgrosskleinschreibung");
                Lernkartei l = new Lernkartei(nummer, beschreibung, wortEinsBeschreibung,
                        wortZweiBeschreibung, richtung, grossKleinschreibung);
                ret.add(l);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            ret = null;
        } finally {
          try { rs.close(); } catch (Exception e) { /* Ignored */ }
          try { stmt.close(); } catch (Exception e) { /* Ignored */ }
          try { con.close(); } catch (Exception e) { /* Ignored */ }
        }
        return ret;
    }
    
    /**
     * Retrieves subjects with expired reminders from the specified learning deck.
     * 
     * @param nummerLernkartei The number of the learning deck.
     * @return A list of Fach objects with expired reminders, or null if the deck does not exist or a database error occurs.
     */
    public static List<Fach> getFaecherErinnerung(int nummerLernkartei) {
        ArrayList<Fach> ret = null;
        if (getLernkartei(nummerLernkartei) != null) {
            ret = new ArrayList<>();
            Connection con = null;
            Statement stmt = null;
            ResultSet rs = null;
            try {
                con = getConnection();
                stmt = con.createStatement();
                String sql =
                     "SELECT f.fnummer, f.fbeschreibung, f.ferinnerung, " +
                     "  f.fgelerntam, f.lnummer " +
                     "  FROM faecher f " +
                     "  WHERE f.lnummer = " + nummerLernkartei + " AND " +
                     "    (f.fgelerntam IS NULL OR " +
                     "    f.ferinnerung <> 0 AND DATEDIFF(NOW(),f.fgelerntam) >= ferinnerung) " +
                     "  ORDER BY f.fnummer;";
                rs = stmt.executeQuery(sql);
                while (rs.next()) {
                    int nummer = rs.getInt("fnummer");
                    String beschreibung = rs.getString("fbeschreibung");
                    int erinnerung = rs.getInt("ferinnerung");
                    Date gelerntAm = rs.getDate("fgelerntam");
                    Fach f = new Fach(nummer, beschreibung, erinnerung, gelerntAm);
                    ret.add(f);
                }
            } catch (SQLException e) {
                e.printStackTrace();
                ret = null;
            } finally {
                try { rs.close(); } catch (Exception e) { /* Ignored */ }
                try { stmt.close(); } catch (Exception e) { /* Ignored */ }
                try { con.close(); } catch (Exception e) { /* Ignored */ }
            }
        }
        return ret;
    }
    
    /**
     * Retrieves all cards from the specified subject.
     * 
     * @param nummerFach The number of the subject.
     * @return A list of Karte objects, or null if the subject does not exist or a database error occurs.
     */
    public static ArrayList<Karte> getKarten(int nummerFach) {
        ArrayList<Karte> ret = null;
        if (getFach(nummerFach) != null) {
            Connection con = null;
            Statement stmt = null;
            ResultSet rs = null;
            try {
                con = getConnection();
                stmt = con.createStatement();
                String sql = 
                     "SELECT k.knummer, kworteins, kwortzwei, l.lrichtung, l.lgrosskleinschreibung " +
                     "  FROM karten k, faecher f, lernkarteien l " +
                     "  WHERE k.fnummer = f.fnummer AND " +
                     "    f.lnummer = l.lnummer AND " +
                     "    k.fnummer = " + nummerFach + ";";
                rs = stmt.executeQuery(sql);
                ret = new ArrayList<>();
                while (rs.next()) {
                    int nummer = rs.getInt("knummer");
                    String wortEins = rs.getString("kworteins");
                    String wortZwei = rs.getString("kwortzwei");
                    boolean richtung = rs.getBoolean("lrichtung");
                    boolean grossKleinschreibung = rs.getBoolean("lgrosskleinschreibung");
                    Karte k = new Karte(nummer, wortEins, wortZwei, richtung, grossKleinschreibung);
                    ret.add(k);
                }
            } catch (SQLException e) {
                e.printStackTrace();
                ret = null;
            } finally {
                try { rs.close(); } catch (SQLException e) { /* Ignored */ }
                try { stmt.close(); } catch (SQLException e) { /* Ignored */ }
                try { con.close(); } catch (SQLException e) { /* Ignored */ }
            }
        }
        return ret;
    }
    
    /**
     * Imports cards into the specified learning deck from a file. If the deck already has subjects and cards,
     * they are deleted before importing. Supported formats include:
     * 
     * Without subjects:
     * Haus; house
     * Strauch; shrub
     * Zaun; fence
     * Garten; Garden
     * Ziegel; brick
     * Schornstein; chimney
     * 
     * With subjects:
     * Haus; house; 0
     * Strauch; shrub; 1
     * Zaun; fence; 0
     * Garten; Garden; 1
     * Ziegel; brick; 2
     * Schornstein; chimney; 1
     * 
     * In the second format, the third column indicates the association with subjects, which are also newly created.
     * Duplicate cards are not imported.
     * 
     * @param nummerLernkartei The number of the learning deck.
     * @param pfad The file path to import from.
     * @return -1 if an import error occurred,
     *         -2 if the file was not found,
     *         -3 if the learning deck does not exist.
     */
    public static int importierenKarten(int nummerLernkartei, String pfad) {
        int ret = -1;
        Lernkartei l = getLernkartei(nummerLernkartei);
        if (l == null) {
            return -3; // Learning deck not found
        }

        if (pfad != null && pfad.length() > 0) {
            BufferedReader reader = null;
            Connection con = null;
            Statement stmt = null;
            ResultSet rs = null;
            try {
                con = getConnection();
                stmt = con.createStatement();
                reader = new BufferedReader(new FileReader(pfad));

                boolean geloescht = false;
                Hashtable<Integer, Fach> faecher = new Hashtable<>();
                int fachNummer = -1;
                Fach fach = null;

                while (true) {
                    String zeile = reader.readLine();
                    if (zeile == null) break; // End of file

                    String[] inhalte = zeile.split(";");
                    if (inhalte.length < 2) {
                        continue; // Skip invalid lines
                    }

                    String wortEins = inhalte[0].trim();
                    String wortZwei = inhalte[1].trim();
                    if (wortEins.isEmpty() || wortZwei.isEmpty()) {
                        continue; // Skip empty lines
                    }

                    if (inhalte.length == 3) {
                        fachNummer = Integer.parseInt(inhalte[2].trim());
                    }

                    if (!geloescht) {
                        geloescht = true;
                        loeschenAlleFaecher(nummerLernkartei);
                    }

                    if (inhalte.length == 3) {
                        fach = faecher.get(fachNummer);
                        if (fach == null) {
                            String sql = "INSERT INTO faecher(lnummer, fbeschreibung) VALUES(" +
                                         nummerLernkartei + ", '" + (fachNummer + 1) + "');";
                            stmt.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);
                            rs = stmt.getGeneratedKeys();
                            if (rs.next()) {
                                int newFachNummer = rs.getInt(1);
                                fach = new Fach(newFachNummer, "" + (fachNummer + 1), 1, null);
                                faecher.put(fachNummer, fach);
                            }
                        }
                    } else {
                        if (fach == null) {
                            // Create default Fach
                            String sql = "INSERT INTO faecher(lnummer, fbeschreibung) VALUES(" +
                                         nummerLernkartei + ", '1');";
                            stmt.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);
                            rs = stmt.getGeneratedKeys();
                            if (rs.next()) {
                                int newFachNummer = rs.getInt(1);
                                fach = new Fach(newFachNummer, "1", 1, null);
                            }
                        }
                    }

                    Karte k = new Karte();
                    k.setWortEins(wortEins);
                    k.setWortZwei(wortZwei);

                    String sql = "INSERT INTO karten(kworteins, kwortzwei, fnummer) VALUES('" +
                                 wortEins + "', '" + wortZwei + "', " + fach.getNummer() + ");";
                    stmt.executeUpdate(sql);
                }

                con.commit();
                ret = 0; // Success
            } catch (SQLException e) {
                try { con.rollback(); } catch (Exception ex) { /* Ignored */ }
                ret = -1;
            } catch (FileNotFoundException e) {
                ret = -2;
            } catch (Exception e) {
                try { con.rollback(); } catch (Exception ex) { /* Ignored */ }
                ret = -1;
            } finally {
                try { if (reader != null) reader.close(); } catch (Exception e) { /* Ignored */ }
                try { if (rs != null) rs.close(); } catch (Exception e) { /* Ignored */ }
                try { if (stmt != null) stmt.close(); } catch (Exception e) { /* Ignored */ }
                try { if (con != null) con.close(); } catch (Exception e) { /* Ignored */ }
            }
        }
        return ret;
    }

    /**
     * Exports all cards from the specified learning deck to a text file, optionally including subject numbers.
     * 
     * @param nummerLernkartei The number of the learning deck.
     * @param pfad The file path to export to.
     * @param mitFaechern Whether to include subject numbers in the export.
     * @return -1 if a database or file writing error occurred,
     *         -3 if the learning deck does not exist,
     *         0 if successful.
     */
    public static int exportierenKarten(int nummerLernkartei, String pfad, boolean mitFaechern) {
        int ret = -1;
        if (getLernkartei(nummerLernkartei) == null) 
            ret = -3;
        else 
            if (pfad != null && pfad.length() > 0) {
                BufferedWriter writer = null;
                Connection con = null;
                Statement stmt = null;
                ResultSet rs = null;
                try {
                    writer = new BufferedWriter(new FileWriter(pfad));
                    con = getConnection();
                    stmt = con.createStatement();
                    String sql =
                         "SELECT kworteins, kwortzwei, fnummer " +
                         "  FROM karten, faecher " +
                         "  WHERE karten.fnummer = faecher.fnummer AND " +
                         "    faecher.lnummer = " + nummerLernkartei +
                         "  ORDER BY faecher.fnummer;";
                    rs = stmt.executeQuery(sql);
                    while (rs.next()) {
                        String zeile = null;
                        if (mitFaechern)
                            zeile = rs.getString("kworteins") + "; " +
                                    rs.getString("kwortzwei") + "; " +
                                    rs.getInt("fnummer") + "\n";
                        else
                            zeile = rs.getString("kworteins") + "; " +
                                    rs.getString("kwortzwei") + "; " + "\n";
                        writer.write(zeile);
                    }
                    ret = 0;
                } catch (IOException | SQLException e) {
                    e.printStackTrace();
                    ret = -1;
                } finally {
                    try { if (writer != null) writer.close(); } catch (Exception e) { /* Ignored */ }
                    try { if (rs != null) rs.close(); } catch (Exception e) { /* Ignored */ }
                    try { if (stmt != null) stmt.close(); } catch (Exception e) { /* Ignored */ }
                    try { if (con != null) con.close(); } catch (Exception e) { /* Ignored */ }
                }
            }
        return ret;
    }
    
    /**
     * Retrieves the learning deck set as the default, which is used when opening the application.
     * 
     * @return The default Lernkartei object, or null if a database error occurred or no default is set.
     */
    public static Lernkartei getEinstellungenStandardLernkartei() {
        Lernkartei ret = null;
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            con = VokabeltrainerDB.getConnection();
            stmt = con.createStatement();
            String sql =
                 "SELECT l.lnummer, l.lbeschreibung, l.lworteinsbeschreibung, l.lwortzweibeschreibung, " +
                 "    l.lrichtung, l.lgrosskleinschreibung " +
                 "  FROM einstellungen e, lernkarteien l " +
                 "  WHERE e.elnummerstandard = l.lnummer;";
            rs = stmt.executeQuery(sql);
            if (rs.next()) {
                int nummer = rs.getInt("lnummer");
                String beschreibung = rs.getString("lbeschreibung");
                String wortEinsBeschreibung = rs.getString("lworteinsbeschreibung");
                String wortZweiBeschreibung = rs.getString("lwortzweibeschreibung");
                boolean richtung = rs.getBoolean("lrichtung");
                boolean grossKleinschreibung = rs.getBoolean("lgrosskleinschreibung");
                ret = new Lernkartei(nummer, beschreibung, wortEinsBeschreibung,
                        wortZweiBeschreibung, richtung, grossKleinschreibung);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            ret = null;
        } finally {
            try { rs.close(); } catch (Exception e) { /* Ignored */ }
            try { stmt.close(); } catch (Exception e) { /* Ignored */ }
            try { con.close(); } catch (Exception e) { /* Ignored */ }
        }
        return ret;
    }
    
    /**
     * Sets the specified learning deck as the default learning deck. If -1 is passed,
     * the default setting is cleared.
     * 
     * @param nummerLernkartei The number of the learning deck to set as default, or -1 to clear.
     * @return -1 if the learning deck was not found or a database error occurred,
     *         0 if successful.
     */
    public static int setEinstellungenStandardLernkartei(int nummerLernkartei) {
        int ret = -1;
        Connection con = null;
        Statement stmt = null;
        try {
            con = VokabeltrainerDB.getConnection();
            stmt = con.createStatement();
            String sql = null;
            if (nummerLernkartei == -1)
                sql = 
                     "UPDATE einstellungen " +
                     "  SET elnummerstandard = null;";
            else
                sql =
                     "UPDATE einstellungen " +
                     "  SET elnummerstandard = " + nummerLernkartei + ";";
            if (stmt.executeUpdate(sql) == 1) {
                con.commit();
                ret = 0;
            }
        } catch (SQLException e) {
            if (e.getErrorCode() != -177)
                e.printStackTrace();
            ret = -1;
        } finally {
            try { stmt.close(); } catch (Exception e) { /* Ignored */ }
            try { con.close(); } catch (Exception e) { /* Ignored */ }
        }
        return ret;
    }
    
    /**
     * Sets whether the user wants to study only in learning decks with expired reminders.
     * 
     * @param lernkarteienMitErinnerung True to enable, false to disable.
     * @return -1 if a database error occurred,
     *         0 if successful.
     */
    public static int setEinstellungenLernkarteienMitErinnerung(boolean lernkarteienMitErinnerung) {
        int ret = -1;
        Connection con = null;
        Statement stmt = null;
        try {
            con = VokabeltrainerDB.getConnection();
            stmt = con.createStatement();
            String sql =
                 "UPDATE einstellungen " +
                 "  SET elernkarteienmiterinnerung = " + lernkarteienMitErinnerung + ";";
            if (stmt.executeUpdate(sql) == 1) {
                con.commit();
                ret = 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
            ret = -1;
        } finally {
            try { stmt.close(); } catch (Exception e) { /* Ignored */ }
            try { con.close(); } catch (Exception e) { /* Ignored */ }
        }
        return ret;
    }
    
    /**
     * Retrieves whether the user has set to study only in learning decks with expired reminders.
     * 
     * @return True if enabled, false otherwise or if no setting has been made.
     */
    public static boolean getEinstellungenLernkarteienMitErinnerung() {
        boolean ret = false;
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            con = VokabeltrainerDB.getConnection();
            stmt = con.createStatement();
            String sql =
                 "SELECT elernkarteienmiterinnerung " +
                 "  FROM einstellungen;";
            rs = stmt.executeQuery(sql);
            if (rs.next())
                ret = rs.getBoolean("elernkarteienmiterinnerung");
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try { rs.close(); } catch (Exception e) { /* Ignored */ }
            try { stmt.close(); } catch (Exception e) { /* Ignored */ }
            try { con.close(); } catch (Exception e) { /* Ignored */ }
        }
        return ret;
    }
    
    /*
     * Helper methods for date manipulation
     */
    protected static String getActualDate() {
        return new SimpleDateFormat("yyyy-MM-dd").format(new Date());
    }

    protected static Date getDateOneDayBeforeToday() {
        Calendar cal = Calendar.getInstance();
        cal.setTime(new Date());
        cal.add(Calendar.DAY_OF_WEEK, -1);
        return cal.getTime();
    }

    /**
     * Converts a Date object to a string in the format "yyyy-MM-dd".
     * 
     * @param date The Date object to convert.
     * @return The formatted date string, or "NULL" if the date is null.
     */
    public static String convertToString(Date date) {
        String ret = null;
        if (date == null)
            ret = "NULL";
        else
            ret = new SimpleDateFormat("yyyy-MM-dd").format(date);
        return ret;
    }
    
    // Additional methods added by the developer

    /**
     * Retrieves all cards from the specified learning deck.
     * 
     * @param nummerLernkartei The number of the learning deck.
     * @return A list of Karte objects, or null if a database error occurs.
     */
    public static List<Karte> getKartenFromLernkartei(int nummerLernkartei) {
        List<Karte> ret = new ArrayList<>();
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            con = getConnection();
            stmt = con.createStatement();
            String sql = "SELECT k.knummer, k.kworteins, k.kwortzwei, l.lrichtung, l.lgrosskleinschreibung, f.fnummer " +
                         "FROM karten k " +
                         "JOIN faecher f ON k.fnummer = f.fnummer " +
                         "JOIN lernkarteien l ON f.lnummer = l.lnummer " +
                         "WHERE l.lnummer = " + nummerLernkartei + ";";
            rs = stmt.executeQuery(sql);
            while (rs.next()) {
                int nummer = rs.getInt("knummer");
                String wortEins = rs.getString("kworteins");
                String wortZwei = rs.getString("kwortzwei");
                boolean richtung = rs.getBoolean("lrichtung");
                boolean grossKleinschreibung = rs.getBoolean("lgrosskleinschreibung");
                int fnummer = rs.getInt("fnummer");
                Karte k = new Karte(nummer, wortEins, wortZwei, richtung, grossKleinschreibung, fnummer);
                ret.add(k);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            ret = null;
        } finally {
            try { rs.close(); } catch (Exception e) { /* Ignored */ }
            try { stmt.close(); } catch (Exception e) { /* Ignored */ }
            try { con.close(); } catch (Exception e) { /* Ignored */ }
        }
        return ret;
    }
    
    /**
     * Retrieves all cards and their associated subjects from the specified learning deck.
     * 
     * @param nummerLernkartei The number of the learning deck.
     * @return A list of Karte objects with associated subject information, or null if a database error occurs.
     */
    public static List<Karte> getKartenUndBoxenVonLernkartei(int nummerLernkartei) {
        List<Karte> ret = new ArrayList<>();
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            con = getConnection();
            stmt = con.createStatement();
            
            String sql = 
              "SELECT k.knummer, k.kworteins, k.kwortzwei, f.fbeschreibung, f.ferinnerung, f.fgelerntam, f.fnummer, l.lrichtung, l.lgrosskleinschreibung " +
              "FROM karten k " +
              "JOIN faecher f ON k.fnummer = f.fnummer " +
              "JOIN lernkarteien l ON f.lnummer = l.lnummer " +
              "WHERE l.lnummer = " + nummerLernkartei + ";";

            rs = stmt.executeQuery(sql);
            while (rs.next()) {
                int nummer = rs.getInt("knummer");
                String wortEins = rs.getString("kworteins");
                String wortZwei = rs.getString("kwortzwei");
                String fachBeschreibung = rs.getString("fbeschreibung");
                int erinnerungsDatum = rs.getInt("ferinnerung");
                Date gelerntAm = rs.getDate("fgelerntam");
                int fnummer = rs.getInt("fnummer");
                boolean richtung = rs.getBoolean("lrichtung");
                boolean grossKleinschreibung = rs.getBoolean("lgrosskleinschreibung");

                // Add the Karte to the list with associated subject information
                ret.add(new Karte(nummer, wortEins, wortZwei, fachBeschreibung, gelerntAm, fnummer, richtung, grossKleinschreibung));
            }
        } catch (SQLException e) {
            e.printStackTrace();
            ret = null;
        } finally {
            try { if (rs != null) rs.close(); } catch (Exception e) { /* Ignored */ }
            try { if (stmt != null) stmt.close(); } catch (Exception e) { /* Ignored */ }
            try { if (con != null) con.close(); } catch (Exception e) { /* Ignored */ }
        }
        return ret;
    }

}
